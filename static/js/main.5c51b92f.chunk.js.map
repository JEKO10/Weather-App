{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","unit","setUnit","inputFocus","React","useRef","fetchData","a","fetch","response","json","data","console","log","useEffect","current","focus","today","Date","day","getDate","month","getMonth","year","getFullYear","className","type","placeholder","onChange","e","target","value","ref","onClick","preventDefault","id","name","cod","message","main","sys","country","description","wind","speed","temp","toString","slice","temp_min","temp_max","sunrise","toUTCString","sunset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c51b92f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BiSun, BiWind } from \"react-icons/bi\";\nimport { FiSunrise, FiSunset } from \"react-icons/fi\";\nimport { WiCloudy } from \"react-icons/wi\";\nimport { RiDrizzleLine, RiFoggyLine, RiSnowyLine } from \"react-icons/ri\";\nimport { IoRainyOutline, IoThunderstormOutline } from \"react-icons/io5\";\n\nconst api = {\n  key: \"30eb85b09f9584e4d9c77aee8b3aaf05\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState([]);\n  const [unit, setUnit] = useState(\"\");\n  const inputFocus = React.useRef(null);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\n        `${api.base}weather?q=${query}&appid=${api.key}`\n      );\n      const data = await response.json();\n      setWeather(data);\n      console.log(data);\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  useEffect(() => {\n    inputFocus.current.focus();\n  }, []);\n\n  const today = new Date();\n  const day = today.getDate();\n  const month = today.getMonth();\n  const year = today.getFullYear();\n\n  return (\n    <>\n      <section className=\"search\">\n        <div className=\"first\">\n          <div>\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              onChange={(e) => {\n                setQuery(e.target.value);\n              }}\n              value={query}\n              ref={inputFocus}\n            />\n            <button\n              type=\"submit\"\n              onClick={(e) => {\n                e.preventDefault();\n                fetchData();\n                setQuery(\"\");\n              }}\n            >\n              SUBMIT\n            </button>\n          </div>\n          <p id=\"date\">{day + \"/\" + month + \"/\" + year}</p>\n        </div>\n        <select\n          name=\"units\"\n          className=\"units\"\n          onChange={(e) => {\n            if (e.target.value === \"celsius\" || \"kelvin\" || \"fahrenheit\") {\n              setUnit(e.target.value);\n            }\n          }}\n        >\n          <option value=\"kelvin\">Kelvin</option>\n          <option value=\"celsius\">Celsius</option>\n          <option value=\"fahrenheit\">Fahrenheit</option>\n        </select>\n        <p id=\"smallDate\">{day + \"/\" + month + \"/\" + year}</p>\n      </section>\n      {weather.cod === \"404\" || weather.cod === \"400\" ? (\n        <p className=\"noCity\">{weather.message}</p>\n      ) : (\n        \"\"\n      )}\n      {typeof weather.main != \"undefined\" ? (\n        <section className=\"weather\">\n          <p className=\"city\">\n            {weather.name}, {weather.sys.country}\n          </p>\n          <h1 id=\"icon\">\n            {weather.weather[0].main === \"Clear\" ? (\n              <BiSun id=\"sun\" />\n            ) : weather.weather[0].main === \"Thunderstorm\" ? (\n              <IoThunderstormOutline id=\"thunder\" />\n            ) : weather.weather[0].main === \"Drizzle\" ? (\n              <RiDrizzleLine id=\"thunder\" />\n            ) : weather.weather[0].main === \"Rain\" ? (\n              <IoRainyOutline id=\"thunder\" />\n            ) : weather.weather[0].main === \"Snow\" ? (\n              <RiSnowyLine id=\"thunder\" />\n            ) : weather.weather[0].main === \"Clouds\" ? (\n              <WiCloudy id=\"cloud\" />\n            ) : (\n              <RiFoggyLine id=\"fog\" />\n            )}\n          </h1>\n          <div className=\"main\">\n            <p>{weather.weather[0].description}</p>\n            <p>Mainly through day: {weather.weather[0].main}</p>\n          </div>\n          <p className=\"wind\">\n            Wind speed: {weather.wind.speed}\n            <BiWind id=\"wind\" />\n          </p>\n          <div className=\"temp\">\n            <p id=\"temp\">\n              {unit === \"celsius\"\n                ? \"Temperature: \" +\n                  (weather.main.temp - 273.15).toString().slice(0, 5) +\n                  \"°C\"\n                : unit === \"fahrenheit\"\n                ? \"Temperature: \" +\n                  (weather.main.temp * (9 / 5) - 459.67)\n                    .toString()\n                    .slice(0, 5) +\n                  \"°F\"\n                : \"Temperature: \" + weather.main.temp + \"K\"}\n            </p>\n            <div>\n              <p id=\"min\">\n                {unit === \"celsius\"\n                  ? \"Min: \" +\n                    (weather.main.temp_min - 273.15).toString().slice(0, 5) +\n                    \"°C\"\n                  : unit === \"fahrenheit\"\n                  ? \"Min: \" +\n                    (weather.main.temp_min * (9 / 5) - 459.67)\n                      .toString()\n                      .slice(0, 5) +\n                    \"°F\"\n                  : \"Min: \" + weather.main.temp_min + \"K\"}\n              </p>\n              <p id=\"max\">\n                {unit === \"celsius\"\n                  ? \"Max: \" +\n                    (weather.main.temp_max - 273.15).toString().slice(0, 5) +\n                    \"°C\"\n                  : unit === \"fahrenheit\"\n                  ? \"Max: \" +\n                    (weather.main.temp_max * (9 / 5) - 459.67)\n                      .toString()\n                      .slice(0, 5) +\n                    \"°F\"\n                  : \"Max: \" + weather.main.temp_max + \"K\"}\n              </p>\n            </div>\n          </div>\n          <div className=\"zenit\">\n            <div>\n              <h5>Sunrise</h5>\n              <p className=\"para\">\n                <FiSunrise id=\"sun\" />\n                {new Date(weather.sys.sunrise * 1000)\n                  .toUTCString()\n                  .slice(16, 22)}\n              </p>\n            </div>\n            <div>\n              <h5>Sunset</h5>\n              <p className=\"para\">\n                <FiSunset id=\"sun\" />\n                {new Date(weather.sys.sunset * 1000)\n                  .toUTCString()\n                  .slice(16, 22)}\n              </p>\n            </div>\n          </div>\n        </section>\n      ) : (\n        \"\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}